/* tslint:disable */
/* eslint-disable */
/**
 * Justina Io
 * OpenApi documentaciÃ³n para app de justina
 *
 * The version of the OpenAPI document: 1.0
 * Contact: justina@ejemplo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PacienteRequest,
  PasswordRequest,
} from '../models/index';
import {
    PacienteRequestFromJSON,
    PacienteRequestToJSON,
    PasswordRequestFromJSON,
    PasswordRequestToJSON,
} from '../models/index';

export interface CrearPacienteRequest {
    pacienteRequest: PacienteRequest;
}

export interface ModificarContraseniaRequest {
    passwordRequest: PasswordRequest;
}

export interface ModificarPacienteRequest {
    pacienteRequest: PacienteRequest;
}

/**
 * 
 */
export class PacienteApi extends runtime.BaseAPI {

    /**
     */
    async crearPacienteRaw(requestParameters: CrearPacienteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['pacienteRequest'] == null) {
            throw new runtime.RequiredError(
                'pacienteRequest',
                'Required parameter "pacienteRequest" was null or undefined when calling crearPaciente().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/paciente/crear-paciente`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PacienteRequestToJSON(requestParameters['pacienteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async crearPaciente(requestParameters: CrearPacienteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.crearPacienteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async modificarContraseniaRaw(requestParameters: ModificarContraseniaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['passwordRequest'] == null) {
            throw new runtime.RequiredError(
                'passwordRequest',
                'Required parameter "passwordRequest" was null or undefined when calling modificarContrasenia().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/paciente/modificar-contrasenia-paciente`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PasswordRequestToJSON(requestParameters['passwordRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async modificarContrasenia(requestParameters: ModificarContraseniaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.modificarContraseniaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async modificarPacienteRaw(requestParameters: ModificarPacienteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['pacienteRequest'] == null) {
            throw new runtime.RequiredError(
                'pacienteRequest',
                'Required parameter "pacienteRequest" was null or undefined when calling modificarPaciente().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/paciente/modificar-paciente`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PacienteRequestToJSON(requestParameters['pacienteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async modificarPaciente(requestParameters: ModificarPacienteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.modificarPacienteRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
